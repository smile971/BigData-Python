import math #导入标准库math
math.factorial(6)#计算6的阶乘
math.gcd(48,39)#返回两个整数的最大公约数
import numpy as np
np.sin([0,np.pi/4,np.pi/2,np.pi])#计算多个角度的正弦值
import os.path as path
path.isfile(r'C:\Windows\notepad.exe')
from random import choice,randint
choice('abcdefg')#从字符中随机选择一个字符
randint(1,100)#在1-100随机生成一个随机数
from os.path import getsize
getsize(r'C:\Windows\notepad.exe')#查看文件大小，单位为字节
from math import pi as PI
print(PI)
from random import *
x=[1,2,3,4,5,6]
shuffle(x)#随机打乱顺序
choice(x)#随机选择一个元素
sample(x,3)#随机选择3个不重复元素
choices('abcd',k=8)#从‘abcd’中随机选择8个字符
random()#返回介于[0,1)区间的随机数
x=3#整型变量，不需要提前声明变量x
type(x)
x=5.0
type(x)
x='Hello world.'
type(x)
x=[1,2,3]
type(x)
x=3
y=x
id(x)#查看对象内存地址
id(y)
x+=6
x
id(x)
id(y)
import math
math.factorial(64)#计算64的阶乘
a=3**0.5#计算3的平方根
result=a**2#一个下划线表示上一个正确的输出
math.isclose(result, 3)#比较两个实数是否靠近
x=3+4j
y=5+6j
x+y
x*y
x**3#计算复数的3次方
abs(x)#使用abs计算复数的模
x.imag#虚部
x.real#实部
x.conjugate()#共轭复数
x='Hello world'#使用单引号作为定界符
x="Python is a great language"#使用双引号作为界定符
x='''Tom said,"Let's go"'''#不同界定符可以互相嵌套
print(x)
'good'+'morning'#连接字符串
'='*30
len('人生苦短，我用Python！')
x_list=[1,2,3]#创建列表对象
x_tuple=(1,2,3)#创建元组对象
x_dict={'a':97,'b':98,'c':99}#创建字典对象，元素形式为”键：值“
x_set={1,2,3}#创建集合对象
print(x_list[1])#使用下标访问指定位置的元素
print(x_tuple[1])#元组也支持使用序号作为下标
print(x_dict['a'])#访问特定的键对应的值
3 in x_set#测试3是否为集合的元素，关键字in支持列表、元组以及字典字符串
3+5#算术加法运算符
[1,2,3]+[4,5,6]#连接两个列表
(1,2,3)+(4,)#连接两个元组
'abcd'+'1234'#连接两个字符串
5-3#算术除法
(5+6j)-(3+4j)#复数减法
{1,2,3,4,5}-{2,3,5,6}#集合的差运算
3*(3+4j)#算术乘法相乘
[1,2,3]*3#列表与整数相乘得到新列表
(1,2,3)*3#元组与整数相乘得到新元组
'abc'*3#字符串与整数相乘得到新字符串
5/2#除法
17//4#向下取整
17.0//4#操作有实数，结果为实数形式的整数值
-17//4#向下取整，负数优先级比整除运算符高
789%23#余数
-17%4#余数与右侧运算数符号一致
'%c,%d'%(65,65)#%c格式化字符，%d格式化整数
3**2#3的平方
9**0.5#9平方根
8**(1/3)#8开立方根
1<3<5 #1<3and3<5
1<2==2 #1<2and2==2
2>3<4 #2>3and3<4
'Hello'>'hello' #只比较第一个字符后面的不用在比较
[1,2,3]<[1,2,4]#前两个元素相等，比较第三个
[1,2,3]<[1,2,3,4]#前三个元素相等，但后面列表比前面长
[3,1,2]<[1,5,6] #第一个元素3<1不成立
{1,2,3}<{1,2,3,4} #前面集合是后面元素的子集
{1,2,3}=={3,2,1} #集合中元素无序，只要包含相同元素集合就相等
{1,2,4}>{1,2,3}#第一个集合不是第二个集合超集
3 in [5,7,3] #测试3是否在列表中
[3] in [5,7,3] #列表中不存在元素[3]
7 in range (1,10,2) #range()用来生成指定范围数字
'abcd' in 'abcdef' #子字符串测试
{1,2,3}|{3,4,5}#并集，并且自动去除重复元素
{1,2,3}&{3,4,5} #交集，
{1,2,3}-{3,4,5} #差集
{1,2,3}^{3,4,5}  #对称差集
3>5 and a>3 #3>5不成立，不计算后面的a>3

3<5 or a>3 #前者成立，不再计算后者
3 and 5  #and 和 or连接的表达式值不一定是True或False
3 and 5>2 #最后一个计算的表达式值作为整个表达式的值
not 3 #非0数等价于True，取反后为False
not [] #空列表等价于False，取反后为True
dir(__builtins__)
bin(55)#转换为二进制形式 
oct(555)#转换为八进制形式
hex(555)#转换为十六进制形式
float(3)#整数转换实数
float('3.5')#字符串转换为实数
float('inf')#正无穷大
float('-inf')
complex(3,5)#生成复数
complex('3+4j')#字符串形式复数转换为复数
int(-3.8)#直接取整数部分
int(3.5)#转换为整数
int('111')#字符串转换为整数
int('\t 8 \n')#自动忽略数字两侧空白字符串
int('   8')
int('1111',8)#将‘1111’看作八进制，转换为十进制整数
int('1111',2)#将‘1111’看作二进制，转换为十进制整数
ord('a')#查看指定字符的unicode码
ord('董')#适用于汉字
char_code=list(map(ord,'董付国'))#获取字符串中每个字符的编码
''.join(map(chr,char_code))#把unicode编码转换为汉字，一个下划线表示上一次输出结果，join是字符串方法，用于连接字符串
chr(65)#返回数字65对应的字符
str([1,2,3])#列表变为字符串
str((1,2,3))#元组变成字符串
str({1,3,4})#集合变成字符串
list()#创建空列表
list(range(5))#把range对象转换为列表
tuple(range(5))#把range对象转换为元组
dict(zip('123456','abcd'))#根据zip对象创建字典
dict(name='董付国',age=41)
set('1111222334')#创建可变集合，自动去除重复元素
set('Python')
eval('3+5')#计算字符串的值
eval(b'3+5')#前面加字母b表示字节串
eval('[1,2,3,4]')#字符串求值，还原为列表
list('[1,2,3,4]')#把字符串中所有元素都转为列表中元素
eval('(1,2,3)')#还原元组
eval('{"a":97,"A":65}')#还原字典
eval('{1,2,3,4,3,2}')#还原集合
x=[1,2,3,4,5]
max(x)
min(x)
sum(x)
sum(x)/len(x)#平均值
max(['55','111'])#返回最大字符串
max(['999','1111'],key=len)#返回长度最大字符串
max(['abc','ABD'],key=str.upper)#忽略大小写
from random import choices #choices()随机选择k个值
data=[choices(range(10),k=8) for i in range(5)]#data有5个子列表，每个子列表有8个随机数字，每个随机数字都在【0=10】区间，循环，遍历并输出每个子列表
for row in data:
    print(row)
#key参数指定排序列表
max(data,key=sum)#元素之和最大的子列表
max(data,key=min)#最小值最大的子列表
max(data,key=lambda row:row[7])#下标7的元素最大的子列表
sum([[1,2],[3,4],[5,6]],[])#等价于[]+[1,2]+[3,4]+[5,6]
x=input('Please input:')#input()函数的参数表示提示信息
type(x)#把用户输入作为字符串对待
int(x)#转换为整数
x=input('Please input:')#一律返回字符串
type(x)
eval(x)
list(x)#['[', '1', ',', '2', ',', '3', ']']
#print(value1,value2,value3,.....,sep='',end='\n') sep参数用于数据之间分隔符，end输出完所有数据之后结束符
print(1,3,5,7,sep='\t')#使用制表符分隔多个值
print(1,3,4,5,sep=',')#使用逗号分隔多个值
print(1,2,3,4,sep='::')#使用双冒号分隔多个值
for i in range(10):#每输出一个元素后输出一个逗号，不换行，最后一个输出后面也有一个逗号
    print(i,end=',')
x=list(range(11))
import random
random.shuffle(x)#shuffle()随机打乱顺序
x
sorted(x)#按正常大小升序排序
sorted(x,key=str)#按转换成字符串后的大小升序排序
sorted(x,key=lambda item:len(str(item)),reverse=True)#按转换成字符串后的长度降序
x=['aaaa','bc','d','ba']
sorted(x,key=lambda item:(len(item),item))
num=random.choices(range(1,10),k=5)
int(''.join(sorted(map(str,num),reverse=True)))#几位数字能够组成的最大数
int(''.join(sorted(map(str,num))))#几位数组成的最小数
data=random.choices(range(50),k=11)#11个介于[0,50]区间的随机数
data
sorted(data)
sorted(data)[len(data)//2]#中位数
import statistics
statistics.median(data)#中位数
x=['aaaa','bc','d','e','fg']
reversed(x)#返回reversed对象
list(reversed(x))#reversed对象可迭代
''.join(reversed('Hello world.'))#返回翻转后的字符串，join()把多个字符串连接为一个长字符串
#reversed不支持内置函数len，reversed函数
y=reversed(x)
'd'in y#reversed对象具有惰性求值特点，每个元素只能使用一次，使用过的元素不能再使用
list(map(str,range(5)))#把列表中元素转为字符串
x=['aaaa','bc','d','b','xc']
list(map(str.upper,x))#转换大小写
x=['Hello','World']
list(map(str.swapcase,x))#交换大小写
sum(map(int,'1234'))#把字符串的内阁字符转换为整数再求和
''.join(map(lambda item:item[0],x))#获取列表x中每个字符串的首字母再把首字母连接成字符串
def add5(v):
    return v+5#单参数函数，接受一个参数，加5后返回
list(map(add5,range(10)))#range(10)中每个元素加5返回
def add(x,y):
    return x+y#可以接受两个参数的函数，返回他们的和
list(map(add,range(5),range(5,10)))#把range(5)和range(5,10)对应位置的数字相加
from functools import reduce
reduce(add,range(1,10))#接受两个参数的函数从左到右依次作用
def mul(x,y):
    return x*y
reduce(mul,range(1,10))#从1到9连乘
def func(x,y):
    return x*10+y
reduce(func,range(1,10))#前面数字乘以10再加下一个数
sets=[{1,2},{2,3},{3,4},{5,6}]
def union(x,y):
    return x|y#返回两个集合的并集
reduce(union,sets)#依次对多个集合进行并集处理
sets=[{1,2,3,4,5},{2,5,7},{3,2,5,8}]
def intersection(x,y):
    return x&y
reduce(intersection,sets)#计算多个集合的交集
seq=['123','hello world','./,','123asd']
list(filter(str.isdigit,seq))#str类的isdigit方法用来测试一个字符串是否只包含数字字符
data=list(range(20))
filterObject=filter(lambda x:x%2==1,data)#过滤，只留下所有奇数
3 in filterObject #3以及3之前的元素都访问过了
list(filterObject)#所有元素都访问过了
list(filterObject)#filterObject中不再包含任何元素
list(filter(None,range(-3,5)))#第一个函数为None，过滤掉等价于False元素
range(5)#start默认为0，step默认为1
list(range(5))#把range对象转换为列表
list(range(1,10))#指定start和step参数
list(range(1,10,2))#同时指定start，stop，和step参数
list(range(9,0,-2))#步长为负数时，start要比stop大否则不会包括任何函数
list(range(5,10,-1))
list(zip('abcdef',[1,2,3]))#压缩字符串和列表，结果数量取决于最短的参数序列
list(zip('123','abc',',;['))#也可以处理3个序列
for item in zip('abcd',range(3)):#zip对象可迭代
    print(item)
x=zip('abcd','1234')
list(x)#zip对象只能遍历一次，访问过元素就不存在了，enumerate，filter，map对象也有这特点
